@using LibraryManagementSystem.Data
@model LibraryManagementSystem.Models.MakeSale

@{
    ViewData["Title"] = "Create Sale";
    ApplicationDbContext dbContext = new ApplicationDbContext();
    var availableBooks = dbContext.Stock.ToList();
    var customers = dbContext.Customers.ToList();
}

<div class="min-h-screen bg-gradient-to-br from-slate-50 via-emerald-50 to-blue-100 py-12">
    <div class="max-w-6xl mx-auto px-6">
        <div class="bg-white/95 backdrop-blur-sm overflow-hidden border border-white/20 ring-1 ring-gray-200/50">
            <div class="relative bg-gradient-to-r from-emerald-600 via-teal-600 to-blue-600 px-12 py-12 overflow-hidden">              
                <div class="relative text-center">
                    <h1 class="text-4xl font-bold text-white mb-3 tracking-tight">Create New Sale</h1>
                    <p class="text-white/90 text-xl font-medium">Process a new book sale transaction</p>
                </div>
            </div>
            <form asp-action="Create" method="post" class="p-12" id="saleForm">
                <div class="mb-12">
                    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-8 border border-blue-200">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-3">
                                <label asp-for="CustomerId" class="text-sm font-bold text-gray-700 uppercase tracking-wide flex items-center">
                                    <svg class="w-4 h-4 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    Select Customer
                                </label>
                                <select asp-for="CustomerId" 
                                        class="w-full px-4 py-4 bg-white border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-blue-200 focus:border-blue-500 outline-none transition-all duration-300 hover:border-gray-300 hover:shadow-md text-gray-900 font-medium shadow-sm"
                                        required>
                                    <option value="">Choose a customer...</option>
                                    @foreach (var customer in customers)
                                    {
                                        <option value="@customer.CustomerId">@customer.CustomerName (@customer.Email)</option>
                                    }
                                </select>
                                <span asp-validation-for="CustomerId" class="text-red-500 text-sm font-medium"></span>
                            </div>
                            
                            <div class="space-y-3">
                                <label asp-for="SaleDate" class="text-sm font-bold text-gray-700 uppercase tracking-wide flex items-center">
                                    <svg class="w-4 h-4 mr-2 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    Sale Date
                                </label>
                                <input asp-for="SaleDate" 
                                       type="date" 
                                       value="@DateTime.Now.ToString("yyyy-MM-dd")"
                                       class="w-full px-4 py-4 bg-white border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-teal-200 focus:border-teal-500 outline-none transition-all duration-300 hover:border-gray-300 hover:shadow-md text-gray-900 font-medium shadow-sm" 
                                       required />
                                <span asp-validation-for="SaleDate" class="text-red-500 text-sm font-medium"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-12">
                    <div class="bg-gradient-to-r from-emerald-50 to-green-50 rounded-2xl p-8 border border-emerald-200">
                        <h3 class="text-xl font-bold text-gray-800 mb-6 flex items-center">
                            <svg class="w-5 h-5 mr-3 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                            </svg>
                            Book Selection
                        </h3>
                        
                        <div id="bookSelections" class="space-y-4">
                            <div class="book-selection-row bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
                                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
                                    <div class="space-y-2">
                                        <label class="text-sm font-bold text-gray-700 uppercase tracking-wide">Book</label>
                                        <select name="BookId" 
                                                class="book-select w-full px-4 py-3 bg-gray-50 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-emerald-200 focus:border-emerald-500 outline-none transition-all duration-300 text-gray-900 font-medium"
                                                required onchange="updateBookInfo(this)">
                                            <option value="">Select a book...</option>
                                            @foreach (var book in availableBooks)
                                            {
                                                <option value="@book.Id" data-price="@book.Price" data-stock="@book.Quantity" data-title="@book.Title" data-author="@book.Author">
                                                    @book.Title by @book.Author ($@book.Price.ToString("0.00")) - Stock: @book.Quantity
                                                </option>
                                            }
                                        </select>
                                    </div>
                                    
                                    <div class="space-y-2">
                                        <label class="text-sm font-bold text-gray-700 uppercase tracking-wide">Quantity</label>
                                        <input name="QuantityOfSale" 
                                               type="number" 
                                               min="1" 
                                               value="1"
                                               class="quantity-input w-full px-4 py-3 bg-gray-50 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-orange-200 focus:border-orange-500 outline-none transition-all duration-300 text-gray-900 font-medium"
                                               required onchange="calculateTotal()">
                                    </div>
                                    
                                    <div class="space-y-2">
                                        <label class="text-sm font-bold text-gray-700 uppercase tracking-wide">Unit Price</label>
                                        <div class="relative">
                                            <span class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-bold">$</span>
                                            <input class="unit-price w-full pl-8 pr-4 py-3 bg-gray-100 border-2 border-gray-200 rounded-xl text-gray-900 font-medium" 
                                                   readonly>
                                        </div>
                                    </div>
                                    
                                    <div class="space-y-2">
                                        <label class="text-sm font-bold text-gray-700 uppercase tracking-wide">Subtotal</label>
                                        <div class="relative">
                                            <span class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-bold">$</span>
                                            <input class="subtotal w-full pl-8 pr-4 py-3 bg-gray-100 border-2 border-gray-200 rounded-xl text-gray-900 font-bold" 
                                                   readonly>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="flex justify-end mt-4">
                                    <button type="button" 
                                            onclick="removeBookSelection(this)"
                                            class="remove-btn bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-xl font-medium transition-all duration-300 hover:scale-105 shadow-md hover:shadow-lg hidden">
                                        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                        Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="flex justify-between items-center mt-6">
                            <button type="button" 
                                    onclick="addBookSelection()"
                                    class="bg-emerald-500 hover:bg-emerald-600 text-white px-6 py-3 rounded-xl font-bold transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-xl">
                                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add Another Book
                            </button>
                            
                            <div class="bg-white rounded-xl p-4 border-2 border-gray-200 shadow-lg">
                                <div class="text-right">
                                    <p class="text-gray-600 text-sm font-medium uppercase tracking-wide">Total Amount</p>
                                    <p id="totalAmount" class="text-3xl font-bold text-emerald-600">$0.00</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <input type="hidden" asp-for="TotalPriceOfSale" id="totalPriceInput">

                <div class="flex flex-col sm:flex-row gap-6 pt-8 py-12 border-t border-gradient-to-r from-gray-100 to-blue-100">
                    <a asp-action="Index" 
                       class="group flex-1 px-8 py-4 border-3 border-gray-300 text-gray-700 rounded-2xl hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100 hover:border-gray-400 transition-all duration-300 text-center font-bold text-lg shadow-lg hover:shadow-xl transform hover:-translate-y-1 hover:scale-105 relative overflow-hidden">
                        <div class="absolute bg-gradient-to-r from-gray-100/0 to-gray-200/0 group-hover:from-gray-100/50 group-hover:to-gray-200/50 transition-all duration-300"></div>
                        <div class="relative flex items-center justify-center">
                            Cancel
                        </div>
                    </a>
                    <button type="submit" 
                            class="group flex-1 px-8 py-4 bg-gradient-to-r from-emerald-600 via-teal-600 to-blue-600 hover:from-emerald-700 hover:via-teal-700 hover:to-blue-700 text-white rounded-2xl transition-all duration-300 font-bold text-lg shadow-xl hover:shadow-2xl transform hover:-translate-y-1 hover:scale-105 relative overflow-hidden">
                        <div class="absolute bg-gradient-to-r from-white/0 to-white/0 group-hover:from-white/10 group-hover:to-white/20 transition-all duration-300"></div>
                        <div class="absolute -top-2 -right-2 w-6 h-6 bg-white/20 rounded-full animate-ping group-hover:animate-pulse"></div>
                        <div class="relative flex items-center justify-center">
                            Complete Sale
                        </div>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <script>
        function updateBookInfo(selectElement) {
            const row = selectElement.closest('.book-selection-row');
            const option = selectElement.options[selectElement.selectedIndex];
            const price = option.dataset.price || 0;
            const stock = option.dataset.stock || 0;
            
            // Update unit price
            const unitPriceInput = row.querySelector('.unit-price');
            unitPriceInput.value = parseFloat(price).toFixed(2);
            
            // Update quantity input max value based on stock
            const quantityInput = row.querySelector('.quantity-input');
            quantityInput.max = stock;
            
            // Validate current quantity against stock
            if (parseInt(quantityInput.value) > parseInt(stock)) {
                quantityInput.value = stock;
                alert(`Only ${stock} items available in stock!`);
            }
            
            // Calculate subtotal
            calculateRowTotal(row);
            calculateTotal();
        }
        
        function calculateRowTotal(row) {
            const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
            const unitPrice = parseFloat(row.querySelector('.unit-price').value) || 0;
            const subtotal = quantity * unitPrice;
            
            row.querySelector('.subtotal').value = subtotal.toFixed(2);
        }
        
        function calculateTotal() {
            let total = 0;
            document.querySelectorAll('.book-selection-row').forEach(row => {
                calculateRowTotal(row);
                const subtotal = parseFloat(row.querySelector('.subtotal').value) || 0;
                total += subtotal;
            });
            
            document.getElementById('totalAmount').textContent = '$' + total.toFixed(2);
            document.getElementById('totalPriceInput').value = total.toFixed(2);
        }
        
        function addBookSelection() {
            const container = document.getElementById('bookSelections');
            const firstRow = container.querySelector('.book-selection-row');
            const newRow = firstRow.cloneNode(true);
            
            // Reset values
            newRow.querySelector('.book-select').selectedIndex = 0;
            newRow.querySelector('.quantity-input').value = 1;
            newRow.querySelector('.quantity-input').max = "";
            newRow.querySelector('.unit-price').value = '';
            newRow.querySelector('.subtotal').value = '';
            
            // Show remove button
            newRow.querySelector('.remove-btn').classList.remove('hidden');
            
            container.appendChild(newRow);
            updateRemoveButtons();
            calculateTotal();
        }
        
        function removeBookSelection(button) {
            const row = button.closest('.book-selection-row');
            row.remove();
            calculateTotal();
            updateRemoveButtons();
        }
        
        function updateRemoveButtons() {
            const rows = document.querySelectorAll('.book-selection-row');
            rows.forEach((row, index) => {
                const removeBtn = row.querySelector('.remove-btn');
                if (rows.length > 1) {
                    removeBtn.classList.remove('hidden');
                } else {
                    removeBtn.classList.add('hidden');
                }
            });
        }
        
        function validateForm() {
            let isValid = true;
            const errors = [];
            
            // Check customer selection
            const customerId = document.querySelector('select[name="CustomerId"]').value;
            if (!customerId) {
                errors.push('Please select a customer');
                isValid = false;
            }
            
            // Check book selections
            const bookRows = document.querySelectorAll('.book-selection-row');
            let hasValidBooks = false;
            
            bookRows.forEach((row, index) => {
                const bookSelect = row.querySelector('.book-select');
                const quantityInput = row.querySelector('.quantity-input');
                
                if (bookSelect.value) {
                    hasValidBooks = true;
                    
                    // Validate quantity
                    const quantity = parseInt(quantityInput.value);
                    const maxStock = parseInt(quantityInput.max);
                    
                    if (quantity > maxStock) {
                        errors.push(`Book ${index + 1}: Quantity exceeds available stock (${maxStock})`);
                        isValid = false;
                    }
                }
            });
            
            if (!hasValidBooks) {
                errors.push('Please select at least one book');
                isValid = false;
            }
            
            // Check total amount
            const total = parseFloat(document.getElementById('totalPriceInput').value);
            if (total <= 0) {
                errors.push('Total amount must be greater than $0.00');
                isValid = false;
            }
            
            if (!isValid) {
                alert('Please fix the following errors:\n\n' + errors.join('\n'));
            }
            
            return isValid;
        }
        
        // Add event listeners for quantity changes
        document.addEventListener('input', function(e) {
            if (e.target.classList.contains('quantity-input')) {
                const maxStock = parseInt(e.target.max);
                const currentValue = parseInt(e.target.value);
                
                if (currentValue > maxStock && maxStock > 0) {
                    e.target.value = maxStock;
                    alert(`Only ${maxStock} items available in stock!`);
                }
                
                calculateTotal();
            }
        });
        
        // Form submission enhancement
        document.getElementById('saleForm').addEventListener('submit', function(e) {
            if (!validateForm()) {
                e.preventDefault();
                return false;
            }
            
            const submitBtn = this.querySelector('button[type="submit"]');
            submitBtn.innerHTML = `
                <div class="relative flex items-center justify-center">
                    <div class="animate-spin w-6 h-6 border-3 border-white border-t-transparent rounded-full mr-3"></div>
                    Processing Sale...
                </div>
            `;
            submitBtn.disabled = true;
        });
        
        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            updateRemoveButtons();
            calculateTotal();
        });
    </script>
}